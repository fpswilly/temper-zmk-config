/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define GAME 1
#define NUM 2
#define NAV 3
#define FUN 4

&lt {
    flavor = "balanced";
    quick-tap-ms = <200>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        FUNC_LAYER {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };

    behaviors {
        HRMl: HRMl {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <190>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <30 30 31 32 33 34 35 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
            hold-trigger-on-release;
        };

        HRMr: HRMr {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <190>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 34 35 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
        };

        skquick: skquick {
            compatible = "zmk,behavior-sticky-key";
            label = "SKQUICK";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        sticky_shift: sticky_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_SHIFT";
            bindings = <&kp>, <&skquick>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
        };

        magic_shift: magic_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "MAGIC_SHIFT";
            bindings = <&sticky_shift LEFT_SHIFT LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        reset_bootloader: reset_bootloader {
            compatible = "zmk,behavior-hold-tap";
            label = "RESET_BOOTLOADER";
            bindings = <&bootloader>, <&sys_reset>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <500>;
        };

        minus_dollar: minus_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_DOLLAR";
            bindings = <&kp KP_SUBTRACT>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        multiply_equal: multiply_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "MULTIPLY_EQUAL";
            bindings = <&kp KP_MULTIPLY>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        swap: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <1>;
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        CAPSLCK {
            bindings = <&kp CAPSLOCK>;
            key-positions = <12 17>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        CAPSWRD {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            layers = <0>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 21>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 22>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <20 21>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <0 1 2 3 30 31 32>;
        };
    };

    macros {
        magic_parenthesis: magic_parenthesis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "MAGIC_PARENTHESIS";
        };

        magic_quotes: magic_quotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_2) &kp LS(NUMBER_2) &kp LEFT>;
            label = "MAGIC_QUOTES";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        COLEMAK-DH {
            bindings = <
&kp Q             &kp W             &kp F                  &kp P            &kp B         &kp J              &kp L          &kp U                &kp Y              &kp APOS
&HRMl LEFT_GUI A  &HRMl LEFT_ALT R  &HRMl LEFT_SHIFT S     &HRMl LCTRL T    &kp G         &kp M              &HRMr RCTRL N  &HRMr RIGHT_SHIFT E  &HRMr RIGHT_ALT I  &HRMr RIGHT_GUI O
&kp Z             &kp X             &kp C                  &kp D            &kp V         &kp K              &kp H          &kp COMMA            &kp PERIOD         &kp SLASH
                                    &HRMl LEFT_ALT DELETE  &lt 3 BACKSPACE  &magic_shift  &HRMr RCTRL SPACE  &lt 2 ENTER    &HRMr RIGHT_GUI TAB
            >;

            label = "base";
        };

        GAME_LAYER {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E  &kp R      &to 0   &kp N7        &kp N8        &kp N9  &trans
&kp LSHFT  &kp A  &kp S  &kp D  &kp F      &kp H   &kp N4        &kp N5        &kp N6  &kp N0
&kp LCTRL  &kp Z  &kp X  &kp C  &kp V      &kp M   &kp NUMBER_1  &kp NUMBER_2  &kp N3  &trans
                  &kp B  &kp G  &kp SPACE  &trans  &kp ENTER     &trans
            >;

            label = "game";
        };

        NUM_NAV_LAYER {
            bindings = <
&kp TILDE  &kp HOME   &kp UP_ARROW  &kp END        &kp PG_UP  &kp PLUS       &kp N7  &kp N8  &kp N9  &multiply_equal
&kp LCTRL  &kp LEFT   &kp DOWN      &kp RIGHT      &kp PG_DN  &kp DOT        &kp N4  &kp N5  &kp N6  &kp N0
&kp LC(Z)  &kp LC(X)  &kp LC(C)     &kp LS(LG(S))  &kp LC(V)  &minus_dollar  &kp N1  &kp N2  &kp N3  &trans
                      &trans        &trans         &trans     &trans         &trans  &trans
            >;

            label = "numnav";
        };

        SYMBOLS_LAYER {
            bindings = <
&kp LS(NUMBER_2)  &kp LS(TAB)    &kp LEFT_ALT      &swap          &kp RA(NUMBER_4)  &kp PLUS         &kp MINUS      &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp EXCLAMATION   &magic_quotes  &kp LS(NUMBER_3)  &kp DOLLAR     &kp PERCENT       &kp CARET        &kp AMPERSAND  &kp ASTERISK    &magic_parenthesis    &kp LS(SQT)
&kp LC(Z)         &kp LC(X)      &kp LC(C)         &kp LS(LG(S))  &kp LC(V)         &kp NON_US_BSLH  &kp COLON      &kp SEMICOLON   &kp LS(NON_US_HASH)   &kp NON_US_HASH
                                 &trans            &trans         &trans            &trans           &trans         &trans
            >;

            label = "sym";
        };

        FUNC_LAYER {
            bindings = <
&bt BT_CLR    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_TOG           &to 1                  &kp F7  &kp F8  &kp F9  &kp F12
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4           &trans                 &kp F4  &kp F5  &kp F6  &kp F11
&trans        &kp C_PREV    &kp C_PP      &kp C_NEXT    &reset_bootloader 0 0  &reset_bootloader 0 0  &kp F1  &kp F2  &kp F3  &kp F10
                            &trans        &trans        &trans                 &trans                 &trans  &trans
            >;

            label = "func";
        };
    };
};
